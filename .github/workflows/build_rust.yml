name: Build and verify Rust library

on:
  issue_comment:
    types: [created]

jobs:
  build-and-check:
    permissions:
      contents: write
      pull-requests: write

    if: |
      github.event.issue.pull_request &&
      github.event.comment.body == '!build_rust' &&
      (github.event.sender.id == github.event.issue.user.id ||
       github.event.comment.author_association == 'COLLABORATOR' ||
       github.event.comment.author_association == 'MEMBER' ||
       github.event.comment.author_association == 'OWNER')

    runs-on: ubuntu-latest

    steps:
    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

    - run: echo "FAIL_NOTIFIED=false" >> "$GITHUB_ENV"

    - name: Like the comment
      env:
        BASE_REPOSITORY: ${{ github.repository }}
        GH_TOKEN: ${{ github.token }}
      run: |
        gh api \
          --method POST \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/$BASE_REPOSITORY/issues/comments/${{ github.event.comment.id }}/reactions \
          -f content='+1'

    - name: Extract PR info
      id: pr_info
      run: |
        PR_API_URL="${{ github.event.issue.pull_request.url }}"
        PR_JSON=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$PR_API_URL")
        echo "PR_REPO=$(echo "$PR_JSON" | jq -r '.head.repo.full_name')" >> $GITHUB_ENV
        echo "PR_BRANCH=$(echo "$PR_JSON"  | jq -r '.head.ref')"           >> $GITHUB_ENV
        echo "base_repo=$(echo "$PR_JSON" | jq -r '.base.repo.full_name')" >> $GITHUB_OUTPUT

    - name: Checkout PR branch
      uses: actions/checkout@v4
      with:
        repository: ${{ env.PR_REPO }}
        ref:          ${{ env.PR_BRANCH }}
        token:        ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 1

    - name: Check for user-supplied files
      id: user_files_check
      run: |
        if [ -f "./rustlibs.dll" ]; then
          echo "dll_exists=true"  >> $GITHUB_OUTPUT
        else
          echo "dll_exists=false" >> $GITHUB_OUTPUT
        fi
        if [ -f "./librustlibs.so" ]; then
          echo "so_exists=true"   >> $GITHUB_OUTPUT
        else
          echo "so_exists=false"  >> $GITHUB_OUTPUT
        fi

    - name: Setup Rust targets
      run: |
        rustup target add i686-unknown-linux-gnu
        rustup target add i686-pc-windows-gnu

    - name: Install cross-toolchain deps
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt-get install -y \
          zlib1g-dev:i386 \
          lib32gcc-11-dev \
          gcc-multilib g++-multilib \
          libc6-dev-i386 \
          libgcc-11-dev:i386 \
          mingw-w64 mingw-w64-i686-dev

    - name: Build Rust libraries
      env:
        BASE_BRANCH: ${{ github.event.repository.default_branch }}
        BASE_REPOSITORY: ${{ github.repository }}
        SOURCE_DATE_EPOCH: "1577836800"
        RUSTFLAGS: "-C link-arg=-Wl,--build-id=none"
        TZ: UTC
      run: |
        git config user.name ss1984rustbuild[bot]
        git config user.email "ss1984rustbuild[bot]@users.noreply.github.com"
        git pull origin "$PR_BRANCH" --depth=$((ahead_by + 1))
        git remote add upstream "https://github.com/$BASE_REPOSITORY.git"
        git fetch upstream "$BASE_BRANCH" --depth=$((behind_by + 1))
        cd rust

        cargo build --release --target i686-unknown-linux-gnu
        cargo build --release --target i686-pc-windows-gnu

        cd ..

        cp rust/target/i686-unknown-linux-gnu/release/librustlibs.so ../librustlibs.so
        cp rust/target/i686-pc-windows-gnu/release/rustlibs.dll ../rustlibs.dll

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rustlibs-built
        path: |
          librustlibs.so
          rustlibs.dll

    - name: Commit and push changes
      if: success()
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        git commit -a -m "Build Rust library" --allow-empty
        git push origin

    - name: Notify Failure
      if: failure() && env.FAIL_NOTIFIED != 'true'
      run: |
        gh pr comment ${{ github.event.issue.html_url }} -b 'Building Rust library failed, see the action run log for details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
